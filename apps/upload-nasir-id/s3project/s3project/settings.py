"""
Django settings for s3project project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-wwugzf7c+bqu7(45tlz01m#m4-9cp363h#1!=b&cd3!+#vw17a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['upload.nasir.id','161.97.100.1','localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'uploader',
    'storages'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 's3project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 's3project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


import os
import hvac

# --- Vault Configuration ---
# Get Vault details from environment variables
# .strip('\'"') is added to remove potential quotes from the environment variable value, a common issue on Windows.
VAULT_ADDR = os.environ.get('VAULT_ADDR', 'https://vault.nasir.id').strip('\'"')
VAULT_TOKEN = os.environ.get('VAULT_TOKEN')

# Path to your secrets in Vault
VAULT_SECRET_PATH = 'aws/nasir'
VAULT_MOUNT_POINT = 'kv'

aws_secrets = {}

# --- Fetch Secrets from Vault ---
try:
    if not VAULT_TOKEN:
        print("VAULT_TOKEN environment variable not set. Skipping Vault connection.")
    else:
        # Initialize the hvac client
        client = hvac.Client(url=VAULT_ADDR, token=VAULT_TOKEN)

        if client.is_authenticated():
            print("Successfully authenticated with Vault.")
            # Read the secret from Vault
            response = client.secrets.kv.v2.read_secret_version(
                path=VAULT_SECRET_PATH,
                mount_point=VAULT_MOUNT_POINT,
            )
            # Store the secrets from the response
            aws_secrets = response['data']['data']
            print("Successfully fetched secrets from Vault.")
        else:
            print("Could not authenticate with Vault. Please check your VAULT_TOKEN.")

except Exception as e:
    # Handle exceptions (e.g., network issues, permission errors)
    print(f"Error connecting to or reading from Vault: {e}")
    print("Please ensure Vault is running and accessible, and that your token is valid.")


# --- AWS S3 Settings ---
# Use the secrets fetched from Vault, with fallbacks for local development if needed
AWS_ACCESS_KEY_ID = aws_secrets.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = aws_secrets.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = 'upload.nasir.id'
AWS_S3_REGION_NAME = 'ap-southeast-1'

# Ensure that files uploaded to S3 are publicly readable
AWS_DEFAULT_ACL = 'public-read'

# Tell django-storages to use S3Boto3Storage for default file storage
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Ensure AWS_QUERYSTRING_AUTH is False for public URLs without signing
AWS_QUERYSTRING_AUTH = False

if AWS_STORAGE_BUCKET_NAME and AWS_S3_REGION_NAME:
    MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/media/'
else:
    MEDIA_URL = '/media/'

MEDIA_ROOT = 'media/'

# To ensure object parameters like Cache-Control if needed
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400', # Cache for 1 day
}